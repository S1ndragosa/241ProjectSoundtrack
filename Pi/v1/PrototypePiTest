import cv2
import time
import argparse
import os
import numpy as np
import requests
import json
import keyboard


# Initialize argument parser and parse arguments
ap = argparse.ArgumentParser()
ap.add_argument("-f", "--face", required=True, help="path to face detector model directory")
ap.add_argument("-a", "--age", required=True, help="path to age detector model directory")
ap.add_argument("-c", "--confidence", type=float, default=0.9, help="minimum probability to filter weak detections")
args = vars(ap.parse_args())

# Define the list of age buckets our age detector will predict
AGE_BUCKETS = ["(0-2)", "(4-6)", "(8-12)", "(15-20)", "(25-32)", "(38-43)", "(48-53)", "(60-100)"]
flask_server_url = 'http://10.42.61.55:5000'

# Load our serialized face detector model from disk
print("[INFO] loading face detector model...")
prototxtPath = os.path.sep.join([args["face"], "deploy.prototxt"])
weightsPath = os.path.sep.join([args["face"], "res10_300x300_ssd_iter_140000.caffemodel"])
faceNet = cv2.dnn.readNet(prototxtPath, weightsPath)

# Load our serialized age detector model from disk
print("[INFO] loading age detector model...")
prototxtPath = os.path.sep.join([args["age"], "age_deploy.prototxt"])
weightsPath = os.path.sep.join([args["age"], "age_net.caffemodel"])
ageNet = cv2.dnn.readNet(prototxtPath, weightsPath)
dict1 = {"Items": []}
# Initialize the camera
cam = cv2.VideoCapture(0)

img_counter = 1
minute_counter = 1
def send_data():
    try:
        response = requests.post(f'{flask_server_url}/receive_data', json = dict1)
        response.raise_for_status()  # This will raise an HTTPError for bad responses
        print("Data sent successfully")
        dict1["Items"] = [] #clears items in the json so it can write again
    except requests.exceptions.HTTPError as err:
        print(f"HTTP error occurred: {err}")  # Ex: 404 Not Found
    except requests.exceptions.ConnectionError as err:
        print(f"Connection error occurred: {err}")
    except requests.exceptions.RequestException as err:
        print(f"An error occurred: {err}")
try:
    while True:
        # Capture a frame
        ret, frame = cam.read()
        if not ret:
            print("Failed to grab frame")
            break

        # Define the image name and save the frame
        img_name = "opencv_frame_{}.png".format(img_counter)
        cv2.imwrite(img_name, frame)
        print("{} written!".format(img_name))

        # Load the saved image
        image = cv2.imread(img_name)
        (h, w) = image.shape[:2]
        blob = cv2.dnn.blobFromImage(image, 1.0, (300, 300), (104.0, 177.0, 123.0))

        # Pass the blob through the network and obtain the face detections
        print("[INFO] computing face detections...")
        faceNet.setInput(blob)
        detections = faceNet.forward()

        # Loop over the detections
        for i in range(0, detections.shape[2]):
            # Extract the confidence (i.e., probability) associated with the prediction
            confidence = detections[0, 0, i, 2]

            # Filter out weak detections by ensuring the confidence is greater than the minimum confidence
            if confidence > args["confidence"]:
                # Compute the (x, y)-coordinates of the bounding box for the object
                box = detections[0, 0, i, 3:7] * np.array([w, h, w, h])
                (startX, startY, endX, endY) = box.astype("int")

                # Extract the ROI of the face and then construct a blob from only the face ROI
                face = image[startY:endY, startX:endX]
                faceBlob = cv2.dnn.blobFromImage(face, 1.0, (227, 227), (78.4263377603, 87.7689143744, 114.895847746), swapRB=False)

                # Make predictions on the age and find the age bucket with the largest corresponding probability
                ageNet.setInput(faceBlob)
                preds = ageNet.forward()
                i = preds[0].argmax()
                age = AGE_BUCKETS[i]
                ageConfidence = preds[0][i]
                dict1["Items"].append({"Age": age, "Emotion" : "NULL"})
                # Display the predicted age to our terminal
                text = "{}: {:.2f}%".format(age, ageConfidence * 100)
                print("[INFO] {}".format(text))
                

                # Draw the bounding box of the face along with the associated predicted age
                y = startY - 10 if startY - 10 > 10 else startY + 10
                cv2.rectangle(image, (startX, startY), (endX, endY), (0, 0, 255), 2)
                cv2.putText(image, text, (startX, y), cv2.FONT_HERSHEY_SIMPLEX, 0.45, (0, 0, 255), 2)
                

        # Display the output image
        cv2.imshow("Image", image)
        cv2.waitKey(1)

        # Wait for 10 seconds before capturing the next frame
        if minute_counter % 6 == 0:
            send_data()
        time.sleep(2)    
        minute_counter += 1
        print(minute_counter)
        # Check if the user has pressed the ESC key to exit
        if keyboard.is_pressed("q"):
            print('q pressed')
            break

finally:
    # Release the camera and close the window
    cam.release()
    cv2.destroyAllWindows()
